import { test, expect } from '../../fixtures';

// –í—Å–µ —Ç–µ—Å—Ç—ã –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç authenticatedPage,
// –ø–æ—ç—Ç–æ–º—É –ª–æ–≥–∏–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –≤ beforeAll —Ñ–∏–∫—Å—Ç—É—Ä—ã.

// Tests for Games page

test('–∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏', async ({ authenticatedPage: page }) => {
  await page.goto('/games');
  await page.waitForLoadState('networkidle');
  await page.waitForTimeout(1000); // –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ lazy load

  const categories = [
    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
    '–ù–æ–≤—ã–µ',
    '–≠–∫—Å–∫–ª—é–∑–∏–≤',
    'Hold & Win',
    '–ö–Ω–∏–≥–∏',
    '–§—Ä—É–∫—Ç—ã',
    'Megaways',
    '–î–∂–µ–∫–ø–æ—Ç',
  ];

  for (const categoryName of categories) {
    const heading = page.locator('div.sc-4e55357-2', { hasText: categoryName }).first();
    await expect(heading, `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`).toBeVisible();

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ ‚Äî –∏—â–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const categoryContainer = heading.locator('xpath=../../following-sibling::*[1]');
    await expect(categoryContainer, `–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`).toBeVisible();

    const cards = categoryContainer.locator('[role="button"]');
    const count = await cards.count();

    console.log(`üü¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —Å–æ–¥–µ—Ä–∂–∏—Ç ${count} –∫–∞—Ä—Ç–æ—á–µ–∫`);
    expect(count, `–û–∂–∏–¥–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 12 –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}", –Ω–æ –Ω–∞–π–¥–µ–Ω–æ ${count}`).toBe(12);

    for (let i = 0; i < count; i++) {
      const card = cards.nth(i);

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const img = card.locator('img');
      await expect(img, `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}"`).toBeVisible();

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ alt)
      const altText = await img.getAttribute('alt');
      const textContent = (await card.textContent())?.trim();
      expect(altText || textContent, `–ö–∞—Ä—Ç–æ—á–∫–∞ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è`).toBeTruthy();

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É, —Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "/play"
      const hrefCandidates = await card.locator('a').evaluateAll(anchors =>
        anchors.map(a => a.getAttribute('href')).filter(Boolean)
      );
      const playHref = hrefCandidates.find(href => href?.endsWith('/play'));
      expect(playHref, `–í –∫–∞—Ä—Ç–æ—á–∫–µ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ /play`).toBeTruthy();
    }
  }
});


test('–ø–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–≥—Ä', async ({ authenticatedPage: page }) => {
  await page.goto('/games');
  await page.waitForLoadState('networkidle');
  await page.waitForTimeout(1000);

  const categories = [
    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
    '–ù–æ–≤—ã–µ',
    '–≠–∫—Å–∫–ª—é–∑–∏–≤',
    'Hold & Win',
    '–ö–Ω–∏–≥–∏',
    '–§—Ä—É–∫—Ç—ã',
    'Megaways',
    '–î–∂–µ–∫–ø–æ—Ç'
  ];

  for (const cat of categories) {
    const el = page.getByText(cat, { exact: true });
    const count = await el.count();
    console.log(`üîç "${cat}" –Ω–∞–π–¥–µ–Ω–æ: ${count}`);

    if (count > 0) {
      const tag = await el.first().evaluate(node => node.tagName);
      const className = await el.first().getAttribute('class');
      const outer = await el.first().evaluate(node => node.outerHTML.slice(0, 300));
      console.log(`‚Æï tag=${tag}, class=${className}\n‚Æë outerHTML: ${outer}`);
    } else {
      console.log(`‚ö†Ô∏è "${cat}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤–æ–æ–±—â–µ!`);
    }
  }

  await page.pause(); // —Å–º–æ–∂–µ—à—å –≥–ª–∞–∑–∞–º–∏ –≤—Å—ë –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
});





test('search and filters work', async ({ authenticatedPage: page }) => {
  await page.goto('/games');
  const search = page.getByPlaceholder('–ù–∞–π–¥–∏ —Å–≤–æ—é –∏–≥—Ä—É');

  // search by name
  await search.fill('book');
  await page.goto('/games?search=book');
  const bookCard = page.getByRole('button', { name: /book/i }).first();
  await bookCard.waitFor();
  await expect(page.getByRole('button', { name: /Magic Apple/i })).toHaveCount(0);

  // reset search
  await page.goto('/games');
  await page.getByRole('button', { name: /Magic Apple/i }).first().waitFor();

  // category filter
  await page.getByRole('combobox', { name: '–§–∏–ª—å—Ç—Ä' }).click();
  await page.getByRole('option', { name: /–ö–Ω–∏–≥–∏/ }).click();
  const bookFiltered = page.getByRole('button', { name: /book/i }).first();
  await bookFiltered.waitFor();
  await expect(page.getByRole('button', { name: /Magic Apple/i })).toHaveCount(0);

  // reset by reloading
  await page.goto('/games');
  await page.getByRole('button', { name: /Magic Apple/i }).first().waitFor();

  // provider filter
  await page.getByRole('combobox', { name: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã' }).click();
  await page.getByRole('option', { name: /Playson/ }).click();
  const playsonGame = page.getByRole('button', { name: /Hot Coins/i }).first();
  await playsonGame.waitFor();
  await expect(page.getByRole('button', { name: /Magic Apple/i })).toHaveCount(0);
});

// Launch games and visual comparison
const launchGames = [
  'Hot Fruits',
  'Magic Apple',
  'Hit Slot 2025',
  'Shining Crown',
  'Gates of Olympus',
  'Coin Express',
];

for (const game of launchGames) {
  test(`${game} launches and matches screenshot`, async ({ authenticatedPage: page }) => {
    const query = encodeURIComponent(game);
    await page.goto(`/games?search=${query}`);
    const cardButton = page
      .getByRole('button', { name: new RegExp(game, 'i') })
      .first();
    await cardButton.waitFor();
    await cardButton.hover();
    const playLink = cardButton.locator('a[href$="/play"]');
    await playLink.waitFor({ state: 'visible' });
    await Promise.all([
      page.waitForURL(/\/play/),
      playLink.click(),
    ]);
    const slug = game.toLowerCase().replace(/[^a-z0-9]+/g, '-');
    await expect(page).toHaveScreenshot(`${slug}.png`, { maxDiffPixels: 100 });
  });
}

