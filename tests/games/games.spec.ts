import { test, expect } from '../../fixtures/users/basicUser.fixture';

test('–∫–∞—Ç–∞–ª–æ–≥ –∏–≥—Ä –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–∞—Ä—Ç–æ—á–∫–∏', async ({ authenticatedPage: page }) => {
  test.setTimeout(90000);
  await Promise.all([
    page.waitForResponse(response =>
      response.url().includes('/server/games') && response.status() === 200
    ),
    page.goto('/games'),
  ]);

  await page.waitForLoadState('domcontentloaded');

  const categories = [
    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ',
    '–ù–æ–≤—ã–µ',
    '–≠–∫—Å–∫–ª—é–∑–∏–≤',
    'Hold & Win',
    '–ö–Ω–∏–≥–∏',
    '–§—Ä—É–∫—Ç—ã',
    'Megaways',
    '–î–∂–µ–∫–ø–æ—Ç',
  ];

  for (const categoryName of categories) {
    const heading = page.locator('div.sc-4e55357-2', { hasText: categoryName }).first();
    await expect(heading, `–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`).toBeVisible();

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ ‚Äî –∏—â–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    const categoryContainer = heading.locator('xpath=../../following-sibling::*[1]');
    await expect(categoryContainer, `–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è "${categoryName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`).toBeVisible();

    const cards = categoryContainer.locator('[role="button"]');
    const count = await cards.count();

    expect(count, `–û–∂–∏–¥–∞–ª–æ—Å—å —Ä–æ–≤–Ω–æ 12 –∫–∞—Ä—Ç–æ—á–µ–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}", –Ω–æ –Ω–∞–π–¥–µ–Ω–æ ${count}`).toBe(12);

    for (let i = 0; i < count; i++) {
      const card = cards.nth(i);

      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const img = card.locator('img.sc-a6470490-2[alt]').first();
      await expect(img, `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}"`).toBeVisible();

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ alt)
      const altText = await img.getAttribute('alt');
      const textContent = (await card.textContent())?.trim();
      expect(altText || textContent, `–ö–∞—Ä—Ç–æ—á–∫–∞ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è`).toBeTruthy();

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É, —Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ "/play"
      const hrefCandidates = await card.locator('a').evaluateAll(anchors =>
        anchors.map(a => a.getAttribute('href')).filter(Boolean)
      );
      const hrefs = await card.locator('a').evaluateAll(anchors =>
        anchors.map(a => a.getAttribute('href')).filter(href => href && href.includes('/games/'))
      );
      expect(hrefs.length, `–í –∫–∞—Ä—Ç–æ—á–∫–µ #${i + 1} –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${categoryName}" –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—É`).toBeGreaterThan(0);
    }
  }
});

test('search works', async ({ authenticatedPage: page }) => {
  await page.goto('/games');

  const search = page.getByPlaceholder('–ù–∞–π–¥–∏ —Å–≤–æ—é –∏–≥—Ä—É');
  await expect(search, '–ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ').toBeVisible();

  // üîé –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
  await search.fill('book');
  await page.keyboard.press('Enter');
  await page.waitForURL(/search=book/, { timeout: 5000 });

  const bookCard = page.getByRole('button').filter({ hasText: /book/i }).first();
  await expect(bookCard, '–ò–≥—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "book" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞').toBeVisible();

  await expect(
    page.getByRole('button').filter({ hasText: /^Magic Apple$/ })
  ).toHaveCount(0);
});

test('category filter works', async ({ authenticatedPage: page }) => {
  await page.goto('/games');

  const categoryFilter = page.locator('div.react-select__single-value', { hasText: '–§–∏–ª—å—Ç—Ä' });
  await expect(categoryFilter, '–§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω').toBeVisible();
  await categoryFilter.click();

  const booksOption = page.locator('[role="option"]').filter({ hasText: '–ö–Ω–∏–≥–∏' }).first();
  await expect(booksOption, '–û–ø—Ü–∏—è "–ö–Ω–∏–≥–∏" –≤ —Ñ–∏–ª—å—Ç—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞').toBeVisible();
  await booksOption.click();

  const filteredBook = page.getByRole('button').filter({ hasText: /book/i }).first();
  await expect(filteredBook, '–ò–≥—Ä–∞ "book" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏').toBeVisible();
  await expect(
    page.getByRole('button').filter({ hasText: /Magic Apple/i })
  ).toHaveCount(0);
});

test('provider filter works', async ({ authenticatedPage: page }) => {
  await page.goto('/games');

  const providerFilter = page.locator('div.react-select__single-value', { hasText: '–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã' });
  await expect(providerFilter, '–§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω').toBeVisible();
  await providerFilter.click();

  const playsonOption = page.locator('div[role="option"]', { hasText: 'Playson' }).first();
  await expect(playsonOption, '–û–ø—Ü–∏—è "Playson" –≤ —Ñ–∏–ª—å—Ç—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞').toBeVisible();
  await playsonOption.click();
  const playsonGame = page.getByRole('button').filter({ hasText: /Hot Coins/i }).first();
  await playsonGame.waitFor({ state: 'visible' });
  await expect(playsonGame, '–ò–≥—Ä–∞ Playson –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É').toBeVisible();
  await page.waitForLoadState('domcontentloaded');
  await page.waitForLoadState('load');
  // await page.waitForTimeout(2000); // –ñ–¥–µ–º, —á—Ç–æ–±—ã –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É—Å–ø–µ–ª–∏ –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å—Å—è
  const filteredOut = page.getByRole('button').filter({ hasText: /Magic Apple/i });
  const filteredCount = await filteredOut.count();
  expect(filteredCount, '–û–∂–∏–¥–∞–ª–æ—Å—å, —á—Ç–æ Magic Apple –Ω–µ –ø–æ–ø–∞–¥—ë—Ç –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É').toBe(0);
});

// Launch games and check that game URLs load successfully
const launchGames = [
  'Hot Fruits',
  'Magic Apple',
  //'Hit Slot 2025', //–∏–≥—Ä–∞ –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ —Å—Ä–µ–¥–µ 
  'Shining Crown',
  'Gates of Olympus',
  'Coin Express',
];

for (const game of launchGames) {
  test(`${game} link loads without HTTP errors`, async ({ authenticatedPage: page }) => {
    const query = encodeURIComponent(game);
    await page.goto(`/games?search=${query}`);

    const cardButton = page
      .getByRole('button', { name: new RegExp(game, 'i') })
      .first();
    await expect(cardButton, `–ö–∞—Ä—Ç–æ—á–∫–∞ –∏–≥—Ä—ã ${game} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`).toBeVisible();
    await cardButton.hover();

    const playLink = cardButton.locator('a[href$="/play"]');
    await expect(playLink, `–ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è ${game} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`).toBeVisible();
    const playHref = await playLink.getAttribute('href');
    expect(playHref, `–°—Å—ã–ª–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è ${game} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`).toBeTruthy();

    await Promise.all([
      page.waitForURL(/\/play/),
      playLink.click(),
    ]);

    const iframe = page.locator('iframe.game-iframe');

    try {
      await expect(iframe).toBeVisible({ timeout: 15000 });
    } catch (err) {
      throw err;
    }
    ///
    ///
    let gameSrc: string | null = null;
    try {
      await expect
        .poll(async () => {
          const src = await iframe.getAttribute('src');
          return src;
        }, {
          message: `iframe –¥–ª—è –∏–≥—Ä—ã ${game} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç src`,
          timeout: 10000,
        })
        .not.toBeNull();

      gameSrc = await iframe.getAttribute('src');
      expect(gameSrc, `src –¥–ª—è iframe –∏–≥—Ä—ã ${game} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`).toBeTruthy();
    } catch (err) {
      throw err;
    }
    const response = await page.request.get(gameSrc!);
    expect(response.ok(), `–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä—ã ${game} –≤–µ—Ä–Ω—É–ª–∞ —Å—Ç–∞—Ç—É—Å ${response.status()}`).toBeTruthy();
  });
}
